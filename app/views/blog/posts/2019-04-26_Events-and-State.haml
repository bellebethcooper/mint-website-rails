- set_meta_tags title: "Blog / Events and State"

%p
  In this post I will show you how to use
  %b events
  and the
  %b internal state
  of components üôÇ

%h2 Events

%p
  Every web application leverages events to handle change in its state, such
  events can come from a couple of different sources:

%ul
  %li user interaction from DOM nodes
  %li interactions from the browser itself
  %li interactions from a server (for example from a WebSocket connection)
  %li and possibly other sources

%p
  I will show you how to handle events that come from DOM nodes.

%h3 Event attributes and handlers

%p
  As in React, DOM nodes can have event attributes attached to them: every
  attribute which starts with
  %b on
  is an
  %b event attribute (
  %code onClick
  ,
  %code onMouseOver
  , etc...)

%p.hint.hint--info
  = octicon "info"
  %span
    Since Mint uses React as platform you can refer to its documentation on the
    list of

    = succeed "." do
      %a(href="https://reactjs.org/docs/events.html") supported events

%p
  Event attributes values are
  %b functions
  which must match one of the following two types:

%ul
  %li
    %code Function(a)
    which returns
    %code a
  %li
    %code Function(Html.Event,a)
    which takes an
    %code Html.Event
    and returns
    %code a

%p.hint.hint--info
  = octicon "info"
  %span
    %code a
    is a type variable which means it can be any other type.

%p
  For example both handlers are valid in this example:

%pre
  %code
    :escaped
      component Main {
        fun increment (event : Html.Event) : String {
          Debug.log("Increment")
        }

        fun decrement : String {
          Debug.log("Decrement")
        }

        fun render : Html {
          <div>
            <button onClick={decrement}>
              "Decrement"
            </button>

            <button onClick={increment}>
              "Increment"
            </button>
          </div>
        }
      }

%p
  When clicking on a button you will see
  %code increment
  or
  %code decrement
  in the console depending on which button you clicked.

%p.hint.hint--info
  = octicon "info"
  %span
    As you can see you can reference the function itself without calling it,
    just by its name.

%h3 Html.Event

%p
  The
  %code Html.Event
  type is a normalized version of the
  %a(href="https://developer.mozilla.org/en-US/docs/Web/API/Event")
    DOM Event
  interface, you can see the actual type definition
  = succeed "." do
    %a(href="https://github.com/mint-lang/mint/blob/master/core/source/Html.Event.mint#L2") here

%h2 Internal State

%p
  Components can have their own state to achieve some specific functionality which does not require a global state.

%p
  A
  %b state
  can be defined using the
  %code state
  keyword similarly to the
  %code property
  keyword:

%pre
  %code
    :escaped
      component Main {
        state count : Number = 0

        ...
      }

%p
  This
  %b state
  can be used across the component just by referencing it:

%pre
  %code
    :escaped
      ...
          <button onClick={decrement}>
            "Decrement"
          </button>

          <{ Number.toString(count) }>

          <button onClick={increment}>
            "Increment"
          </button>
      ....

%h3 Modifying State

%p
  A state (or multiple ones) can be set using the
  %code next
  keyword: it tells the component to replace the given states with new values.

%p.hint.hint--info
  = octicon "info"
  %span
    States don't mutate but get replaced because data-structures in Mint are immutable.

%p
  For example we modify our functions to update the count:

%pre
  %code
    :escaped
      ...
        fun increment : Promise(Never, Void) {
          next { count = count + 1 }
        }

        fun decrement : Promise(Never, Void) {
          next { count = count - 1 }
        }
      ...

%p
  Notice that the return type of the function has changed to
  %code Promise(Never, Void)

%p
  Promises are used in asynchronous computations (which we will touch in the
  next post) and modifying state returns a promise because it is considered a
  side-effect.

%p
  A promise has two parameters, the first is the error type in this case it's
  %code Never
  to indicate it can't fail and the second is the type of the return value when
  it resolves, in this case it's
  %code Void
  meaning its not relevant (basically cannot be used for anything).

%p
  That's it for today, thank you for reading üôè
